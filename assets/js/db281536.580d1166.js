"use strict";(self.webpackChunkncm_301=self.webpackChunkncm_301||[]).push([[2436],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,d=c["".concat(o,".").concat(k)]||c[k]||m[k]||l;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},82946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,i={unversionedId:"calm_onboard_tenant/calm_onboard_tenant",id:"calm_onboard_tenant/calm_onboard_tenant",title:"calm_onboard_tenant",description:"Script Provided Below.. \\calmdsl:",source:"@site/docs/calm_onboard_tenant/calm_onboard_tenant.mdx",sourceDirName:"calm_onboard_tenant",slug:"/calm_onboard_tenant/",permalink:"/ncm301/calm_onboard_tenant/",draft:!1,editUrl:"https://github.com/mat0606/ncm301/edit/main/docs/calm_onboard_tenant/calm_onboard_tenant.mdx",tags:[],version:"current",frontMatter:{}},o={},p=[{value:"Pre-requsities:",id:"pre-requsities",level:2},{value:"Overview",id:"overview",level:2},{value:"Create a blueprint to onboard tenant",id:"create-a-blueprint-to-onboard-tenant",level:3},{value:"Create a blueprint to create subnet into VPC",id:"create-a-blueprint-to-create-subnet-into-vpc",level:3},{value:"Create a blueprint to create Tunnel VM into VPC",id:"create-a-blueprint-to-create-tunnel-vm-into-vpc",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Script Provided Below"),".. ","_","calm_dsl:"),(0,r.kt)("h1",{id:"calm-onboard-tenant"},"Calm: Onboard Tenant"),(0,r.kt)("h2",{id:"pre-requsities"},"Pre-requsities:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In Prism Central, Micro-service infrastructure was enabled"),(0,r.kt)("li",{parentName:"ol"},"In Prism Central, Advanced Network was enabled"),(0,r.kt)("li",{parentName:"ol"},"PC2022.1.02"),(0,r.kt)("li",{parentName:"ol"},"Calm 3.5.0")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The service provider would like to onboard each tenant."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(91416).Z,width:"1909",height:"859"})),(0,r.kt)("h3",{id:"create-a-blueprint-to-onboard-tenant"},"Create a blueprint to onboard tenant"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("strong",{parentName:"li"},"Create Blueprint"),". Create a ",(0,r.kt)("strong",{parentName:"li"},"Multi VM/Pod")," blueprint.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(93300).Z,width:"529",height:"206"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the ",(0,r.kt)("strong",{parentName:"li"},"Credentials")," tab. Create a new credential for ",(0,r.kt)("strong",{parentName:"li"},"PC\nCredential")," and enter desired User/Pass","*","*")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(32053).Z,width:"796",height:"546"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following variables on the right side of the screen.")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"vpc_name Default value: empty. ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable mandatory")),(0,r.kt)("li",{parentName:"ul"},"external_routable_ip Default value: ",(0,r.kt)("strong",{parentName:"li"},"Follow the cluster. Eg\n10.x.x.0/24"),". ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable mandatory")),(0,r.kt)("li",{parentName:"ul"},"dns Default value: ",(0,r.kt)("strong",{parentName:"li"},"1.1.1.1"),". ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable mandatory")),(0,r.kt)("li",{parentName:"ul"},"PC_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"Follow the cluster PC. Eg 10.x.x.39"))),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(41657).Z,width:"476",height:"498"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following dynamic variable: ",(0,r.kt)("strong",{parentName:"li"},"external_subnet")," on the\nright side of the screen. ",(0,r.kt)("strong",{parentName:"li"},"Replace the password with the Prism\nCentral password."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "admin"\npassword = "x.x.x.x"\nip = "@@{PC_IP}@@"\npayload = {\n"kind": "subnet"\n}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json[\'entities\']:\n  subnet_list.append("{}".format(subnet[\'spec\'][\'name\']))\n  print \',\'.join(subnet_list)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the left hand side of the screen, create a service action:\n",(0,r.kt)("strong",{parentName:"li"},"Create VPC"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(95716).Z,width:"551",height:"293"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"GetNetworkUUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"pe_network_UUID")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\npayload = {\n\n}\n\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json[\'entities\']:\n  if subnet[\'spec\'][\'name\'] == "@@{external_subnet}@@":\n    print "pe_network_UUID={}".format(subnet[\'metadata\'][\'uuid\'])\n    exit(0)\nexit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Split external routable ip")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"ext_routable_ip")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"ext_routable_ip_prefix")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'ext_routable_ip = "@@{external_routable_ip}@@"\n\next_routable_ip_array = [] \next_routable_ip_array = ext_routable_ip.split("/")\nprint "ext_routable_ip={0}".format(ext_routable_ip_array[0])\nprint "ext_routable_ip_prefix={0}".format(ext_routable_ip_array[1])\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Invoke API to create VPC")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Execute")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC_Credential.username}@@"\npassword = "@@{PC_Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\n\npayload = {\n  "spec": {\n    "name": "@@{vpc_name}@@",\n    "resources": {\n      "common_domain_name_server_ip_list": [\n      { \n        "ip": "@@{dns}@@"\n      }\n      ],\n      "external_subnet_list": [\n      {\n        "external_subnet_reference": {\n          "kind": "subnet",\n          "uuid": "@@{pe_network_UUID}@@"\n        }\n      }\n      ],\n      "externally_routable_prefix_list": [\n      {\n        "ip": "@@{ext_routable_ip}@@",\n        "prefix_length": @@{ext_routable_ip_prefix}@@\n      }\n      ]\n    }\n  },\n#  "description": "on prem VPC",\n  "api_version": "3.0",\n  "metadata": {\n    "kind": "vpc",\n    "categories": {\n      "VirtualNetworkType": "Tenant"\n    }\n  }\n}\n\nurl = "https://" + ip + ":9440/api/nutanix/v3/vpcs"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\nprint "Output: {}".format(r.text)\nif r.ok:\n  print "VPC {0} is created successfully".format("@@{vpc_name}@@")\nelse:\n  exit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the left side of the screen, click on ",(0,r.kt)("strong",{parentName:"li"},"Package: Install"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(56153).Z,width:"1026",height:"272"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("strong",{parentName:"li"},"+ Action"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(46800).Z,width:"489",height:"423"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Let\\'s create the service action to delete the VPC. On the left hand\nside of the screen, create a service action: ",(0,r.kt)("strong",{parentName:"li"},"Delete VPC"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(95716).Z,width:"551",height:"293"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Get VPC UUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"vpc_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\npayload = {}\n\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/vpcs"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print "Status code: {}".format(r.status_code)\n#print "Output: {}".format(r.text)\nvpc_list = []\nvpc_list_json = r.json()\nfor vpc in vpc_list_json[\'entities\']:\n  if vpc[\'spec\'][\'name\'] == "@@{vpc_name}@@":\n    print vpc[\'spec\'][\'name\']\n    print "vpc_uuid={0}".format(vpc[\'metadata\'][\'uuid\'])\n    exit(0)\nexit(1)  \n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Invoke API to delete VPC")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Execute")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\npayload = {\n\n}\n\nurl = "https://" + ip + ":9440/api/nutanix/v3/vpcs/@@{vpc_uuid}@@"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "DELETE"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\n#print "Output: {}".format(r.text)\nif r.ok:\n  print "VPC {0} is created successfully".format("@@{vpc_name}@@")\nelse:\n  exit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Associate the ",(0,r.kt)("strong",{parentName:"li"},"Delete VPC")," action with the ",(0,r.kt)("strong",{parentName:"li"},"Package uninstall"),"\naction. Click on ",(0,r.kt)("strong",{parentName:"li"},"+ Action"),". Choose the ",(0,r.kt)("strong",{parentName:"li"},"Delete VPC")," action.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(79525).Z,width:"1002",height:"306"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Enter the name of Application \\"VPC-\\<INITIALS',">"," and fill out the\nform with the requested information")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(80157).Z,width:"624",height:"420"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Press ",(0,r.kt)("strong",{parentName:"li"},"Deploy")),(0,r.kt)("li",{parentName:"ol"},'Once the application is \\"running\\". Let\\\'s look at the audit log.')),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(5423).Z,width:"475",height:"491"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In Prism Central ",(0,r.kt)("strong",{parentName:"li"},"Network and Security")," ",(0,r.kt)("strong",{parentName:"li"},"Virtual Private Cloud"),",\nlet\\'s look at the newly created VPC")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(61230).Z,width:"624",height:"162"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Drill into the VPC to look at its details")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(11895).Z,width:"624",height:"190"})),(0,r.kt)("h3",{id:"create-a-blueprint-to-create-subnet-into-vpc"},"Create a blueprint to create subnet into VPC"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("strong",{parentName:"li"},"Create Blueprint"),". Create a ",(0,r.kt)("strong",{parentName:"li"},"Multi VM/Pod")," blueprint.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(93300).Z,width:"529",height:"206"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the ",(0,r.kt)("strong",{parentName:"li"},"Credentials")," tab. Create a new credential for ",(0,r.kt)("strong",{parentName:"li"},"PC\nCredential")," and enter desired User/Pass","*","*")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(32053).Z,width:"796",height:"546"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following variables on the right side of the screen.")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"subnet_name Default value: empty. ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable mandatory")),(0,r.kt)("li",{parentName:"ul"},"Gateway_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"192.168.1.1"),". ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable\nmandatory")),(0,r.kt)("li",{parentName:"ul"},"Network_IP_Prefix Default value: ",(0,r.kt)("strong",{parentName:"li"},"192.168.1.0/24"),". ",(0,r.kt)("strong",{parentName:"li"},"Mark this\nvariable mandatory")),(0,r.kt)("li",{parentName:"ul"},"Start_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"192.168.1.10"),". ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable\nmandatory")),(0,r.kt)("li",{parentName:"ul"},"End_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"192.168.1.30"),". ",(0,r.kt)("strong",{parentName:"li"},"Mark this variable\nmandatory")),(0,r.kt)("li",{parentName:"ul"},"PC_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"Follow the cluster PC. Eg 10.x.x.39"))),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(53660).Z,width:"472",height:"671"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following dynamic variable: ",(0,r.kt)("strong",{parentName:"li"},"vpc_name")," on the right\nside of the screen. ",(0,r.kt)("strong",{parentName:"li"},"Replace the password with the Prism Central\npassword."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "admin"\npassword = "xxxxxxxx"\nip = "@@{PC_IP}@@"\npayload = {}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/vpcs"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print "Status code: {}".format(r.status_code)\n#print "Output: {}".format(r.text)\nvpc_list = []\nvpc_list_json = r.json()\nfor vpc in vpc_list_json[\'entities\']:\n  vpc_list.append("{}".format(vpc[\'spec\'][\'name\']))\nprint \',\'.join(vpc_list)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the left hand side of the screen, create a service action:\n",(0,r.kt)("strong",{parentName:"li"},"Create Subnet in VPC"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(95716).Z,width:"551",height:"293"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Get VPC UUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"vpc_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\npayload = {\n  "filter": "name==@@{vpc_name}@@"\n}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/vpcs"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print "Status code: {}".format(r.status_code)\n#print "Output: {}".format(r.text)\nvpc_list = []\nvpc_list_json = r.json()\nfor vpc in vpc_list_json[\'entities\']:\n  print "vpc_uuid={0}".format(vpc[\'metadata\'][\'uuid\'])\n  exit(0)\nprint "Error retrieving the VPC UUID for {0}".format("@@{vpc_name}@@")\nexit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Split Network IP Prefix")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"network_ip")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"network_ip_prefix")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'network_ip_prefix = "@@{Network_IP_Prefix}@@"\n\nnetwork_ip_prefix_array = [] \nnetwork_ip_prefix_array = network_ip_prefix.split("/")\nprint "network_ip={0}".format(network_ip_prefix_array[0])\nprint "network_ip_prefix={0}".format(network_ip_prefix_array[1])\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Create Subnet in VPC")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Execute")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\n\npayload = {\n  "spec": {\n    "name": "@@{subnet_name}@@",\n    "resources": {\n      "subnet_type": "OVERLAY",\n      "vpc_reference": {\n        "kind": "vpc",\n        "uuid": "@@{vpc_uuid}@@"\n      },\n      "external_connectivity_state": "ENABLED",\n      "ip_config": {\n        "pool_list": [\n        {\n          "range": "@@{Start_IP}@@ @@{End_IP}@@"\n        }\n        ],\n        "subnet_ip": "@@{network_ip}@@",\n        "prefix_length": @@{network_ip_prefix}@@,\n        "default_gateway_ip": "@@{Gateway_IP}@@"\n      }\n    }\n  },\n  "metadata": {\n    "kind": "subnet",\n  }\n}\n\nurl = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\nprint "Output: {}".format(r.text)\nif r.ok:\n  print "Subnet {1} in VPC {0} is created successfully".format("@@{vpc_name}@@","@@{subnet_Name}@@")\nelse:\n  exit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the left side of the screen, click on ",(0,r.kt)("strong",{parentName:"li"},"Package: Install"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(56153).Z,width:"1026",height:"272"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("strong",{parentName:"li"},"+ Action"),". Associate it with ",(0,r.kt)("strong",{parentName:"li"},"Create Subnet in VPC")),(0,r.kt)("li",{parentName:"ol"},"Let\\'s create the service action to delete the subnet VPC. On the\nleft hand side of the screen, create a service action: ",(0,r.kt)("strong",{parentName:"li"},"Delete\nSubnet in VPC"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(95716).Z,width:"551",height:"293"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Get Subnet UUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"subnet_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\npayload = {\n  "filter": "name==@@{subnet_name}@@"\n}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json[\'entities\']:\n  print "subnet_uuid={0}".format(subnet[\'metadata\'][\'uuid\'])\n  exit(0)\nprint "Error retrieving the Subnet UUID for {0}".format("@@{subnet_name}@@")\nexit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Delete Subnet")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Execute")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\npayload = {\n}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nurl = base_url + "/@@{subnet_uuid}@@"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "DELETE"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Associate the ",(0,r.kt)("strong",{parentName:"li"},"Delete Subnet in VPC")," action with the ",(0,r.kt)("strong",{parentName:"li"},"Package\nuninstall")," action. Click on ",(0,r.kt)("strong",{parentName:"li"},"+ Action"),". Choose the ",(0,r.kt)("strong",{parentName:"li"},"Delete\nSubnet in VPC")," action.")),(0,r.kt)("blockquote",null,(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},'Enter the name of Application \\"SubnetVPC-\\<INITIALS',">"," and fill\nout the form with the requested information")),(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(88035).Z,width:"624",height:"447"})))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Press ",(0,r.kt)("strong",{parentName:"li"},"Deploy")),(0,r.kt)("li",{parentName:"ol"},'Once the application is \\"running\\". Let\\\'s look at the audit log.')),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(40019).Z,width:"489",height:"415"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In Prism Central ",(0,r.kt)("strong",{parentName:"li"},"Network and Security")," ",(0,r.kt)("strong",{parentName:"li"},"Virtual Private Cloud"),",\nlet\\'s look at the newly created VPC")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(78209).Z,width:"624",height:"133"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Drill into the subnet to look at its details")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(60497).Z,width:"624",height:"174"})),(0,r.kt)("h3",{id:"create-a-blueprint-to-create-tunnel-vm-into-vpc"},"Create a blueprint to create Tunnel VM into VPC"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("strong",{parentName:"li"},"Create Blueprint"),". Create a ",(0,r.kt)("strong",{parentName:"li"},"Multi VM/Pod")," blueprint.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(93300).Z,width:"529",height:"206"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the ",(0,r.kt)("strong",{parentName:"li"},"Credentials")," tab. Create a new credential for ",(0,r.kt)("strong",{parentName:"li"},"PC\nCredential")," and enter desired User/Pass","*","*")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(32053).Z,width:"796",height:"546"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a new credential for ",(0,r.kt)("strong",{parentName:"li"},"PE Credential")," and enter desired\nUser/Pass","*","*"),(0,r.kt)("li",{parentName:"ol"},"Create the following variables on the right side of the screen.")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"PC_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"Follow the cluster PC. Eg 10.x.x.39")),(0,r.kt)("li",{parentName:"ul"},"PE_IP Default value: ",(0,r.kt)("strong",{parentName:"li"},"Follow the cluster PE. Eg 10.x.x.37"))),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(14189).Z,width:"473",height:"400"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following dynamic variable: ",(0,r.kt)("strong",{parentName:"li"},"vpc_name")," on the right\nside of the screen. ",(0,r.kt)("strong",{parentName:"li"},"Replace the password with the Prism Central\npassword."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "admin"\npassword = "xxxxxxxx"\nip = "@@{PC_IP}@@"\npayload = {}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/vpcs"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print "Status code: {}".format(r.status_code)\n#print "Output: {}".format(r.text)\nvpc_list = []\nvpc_list_json = r.json()\nfor vpc in vpc_list_json[\'entities\']:\n  vpc_list.append("{}".format(vpc[\'spec\'][\'name\']))\nprint \',\'.join(vpc_list)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the following dynamic variable: ",(0,r.kt)("strong",{parentName:"li"},"subnet_name")," on the right\nside of the screen. ",(0,r.kt)("strong",{parentName:"li"},"Replace the password with the Prism Central\npassword."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "admin"\npassword = "xxxxxxx"\nip = "@@{PC_IP}@@"\n\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\n\ndef get_vpc_uuid(vpc_name):\n    vpc_url = "https://"+ip+":9440/api/nutanix/v3/vpcs/list"\n    params={"kind": "vpc"}\n    r = urlreq(vpc_url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(params), verify=False, headers=headers)\n  #  print "status code: {}".format(r.status_code)\n   # print "response: {}".format(r.text)\n    vpc_list_json = r.json()\n    for vpc in vpc_list_json["entities"]:\n      if vpc["spec"]["name"]==vpc_name:\n        return vpc["metadata"]["uuid"]\n    exit(1)\nvpc_uuid=get_vpc_uuid("@@{vpc_name}@@")\n\npayload = {\n  "kind": "subnet"\n\n}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nurl = base_url + "/list"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\n#print "Status code: {}".format(r.status_code)\n#print "Output: {}".format(r.text)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json[\'entities\']:\n # print "cluster[\'spec\'][\'name\']"\n  if subnet[\'spec\'][\'resources\'][\'subnet_type\'] == \'OVERLAY\' and subnet[\'spec\'][\'resources\'][\'vpc_reference\'][\'uuid\'] == vpc_uuid:\n    subnet_list.append("{}".format(subnet[\'spec\'][\'name\']))\n\nprint \',\'.join(subnet_list)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the left hand side of the screen, create a service action:\n",(0,r.kt)("strong",{parentName:"li"},"Create Tunnel VM"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(95716).Z,width:"551",height:"293"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Get VPC UUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"vpc_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\n\ndef get_vpc_uuid(vpc_name):\n    vpc_url = "https://"+ip+":9440/api/nutanix/v3/vpcs/list"\n    params={"kind": "vpc"}\n    r = urlreq(vpc_url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(params), verify=False, headers=headers)\n  #  print "status code: {}".format(r.status_code)\n   # print "response: {}".format(r.text)\n    vpc_list_json = r.json()\n    for vpc in vpc_list_json["entities"]:\n      if vpc["spec"]["name"]==vpc_name:\n        return vpc["metadata"]["uuid"]\n    exit(1)\nvpc_uuid=get_vpc_uuid("@@{vpc_name}@@")\nprint "vpc_uuid={0}".format(vpc_uuid)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"GetAccountName")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"account_name")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print "account_name=NTNX_LOCAL_AZ"\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"GetAccountUUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"account_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\npayload = {\n  "length": 250\n}\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/accounts"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\naccount_list = []\naccount_list_json = r.json()\nfor account in account_list_json[\'entities\']:\n  if account[\'status\'][\'name\'] == "@@{account_name}@@": #sometimes this value will be \'{}\'\n    print "account_UUID={}".format(account[\'metadata\'][\'uuid\'])\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"GetSubnetUUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"subnet_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\npayload = {\n\n}\n\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/subnets"\nurl = base_url + "/list"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nsubnet_list = []\nsubnet_list_json = r.json()\nfor subnet in subnet_list_json[\'entities\']:\n  if subnet[\'spec\'][\'name\'] == "@@{subnet_name}@@":\n    print "pe_network_UUID={}".format(subnet[\'metadata\'][\'uuid\'])\n    exit(0)\n\nexit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"GetClusterUUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"pe_cluster_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PE Credential.username}@@" \npassword = "@@{PE Credential.secret}@@"\nip = "@@{PE_IP}@@"\n\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth="BASIC", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\npayload = {}\nbase_url = "https://" + ip + ":9440/PrismGateway/services/rest/v2.0/cluster"\nurl = base_url + "/"\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "GET"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\n\ncluster_list = []\ncluster_list_json = r.json()\n\nprint "pe_cluster_uuid={}".format(cluster_list_json[\'uuid\'])\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"Provision Tunnel VM")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Execute")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\n\nnetwork_group_tunnel_uuid = "{}".format(str(uuid.uuid4()))\ntunnel_uuid = "{}".format(str(uuid.uuid4()))\n\npayload = {\n  "api_version": "3.1.0",\n  "metadata": {\n    "kind": "network_group_tunnel",\n    "uuid": network_group_tunnel_uuid\n  },\n  "spec": {\n    "resources": {\n      "platform_vpc_uuid_list": [\n        "@@{vpc_uuid}@@"\n      ],\n      "tunnel_reference": {\n        "kind": "tunnel",\n        "uuid": tunnel_uuid,\n        "name": "NTNX_LOCAL_AZ_VPC_@@{vpc_name}@@_Tunnel"\n      },\n      "account_reference": {\n        "kind": "account",\n        "name": "@@{account_name}@@",\n        "uuid": "@@{account_UUID}@@"\n      },\n      "tunnel_vm_spec": {\n        "vm_name": "@@{vpc_name}@@_@@{subnet_name}@@_TunnelVM",\n        "subnet_uuid": "@@{pe_network_UUID}@@",\n        "cluster_uuid": "@@{pe_cluster_uuid}@@"\n      }\n    },\n    "name": "VPC_@@{vpc_name}@@_NTNX_LOCAL_AZ"\n  }\n}\n\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/network_groups/tunnels"\nurl = base_url\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\nprint "Output: {}".format(r.text)\nif r.ok:\n  print "Successful invocation of tunnel VM"\nelse:\n  exit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the left side of the screen, click on ",(0,r.kt)("strong",{parentName:"li"},"Package: Install"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(56153).Z,width:"1026",height:"272"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("strong",{parentName:"li"},"+ Action"),". Associate it with ",(0,r.kt)("strong",{parentName:"li"},"Create Tunnel VM")),(0,r.kt)("li",{parentName:"ol"},"Let\\'s create the service action to delete the tunnel vm. On the\nleft hand side of the screen, create a service action: ",(0,r.kt)("strong",{parentName:"li"},"Delete\nTunnel VM"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(95716).Z,width:"551",height:"293"}))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"GetTunnelUUID")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Set Variable")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")),(0,r.kt)("li",{parentName:"ul"},"output: ",(0,r.kt)("strong",{parentName:"li"},"tunnel_uuid")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "POST"\n\npayload = {\n  "kind": "tunnel",\n  "filter": "name==NTNX_LOCAL_AZ_VPC_@@{vpc_name}@@_Tunnel"\n}\n\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/tunnels/list"\nurl = base_url\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\nprint "Output: {}".format(r.text)\nif r.ok:\n  print "Successful retrieval of tunnel VM"\n  tunnel_json = r.json()\n  for tunnel in tunnel_json[\'entities\']:\n    if tunnel[\'metadata\'][\'name\'] == \'NTNX_LOCAL_AZ_VPC_@@{vpc_name}@@_Tunnel\':\n      print "tunnel_uuid={}".format(tunnel[\'metadata\'][\'uuid\'])\n      exit(0)\nelse:\n  exit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the service, click ",(0,r.kt)("strong",{parentName:"li"},"Create Task"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Task Name: ",(0,r.kt)("strong",{parentName:"li"},"DeleteTunnel")),(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("strong",{parentName:"li"},"Execute")),(0,r.kt)("li",{parentName:"ul"},"Script Type: ",(0,r.kt)("strong",{parentName:"li"},"EScript")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user = "@@{PC Credential.username}@@"\npassword = "@@{PC Credential.secret}@@"\nip = "@@{PC_IP}@@"\n\nheaders = {\'Accept\': \'application/json\', \'Content-Type\': \'application/json\'}\nurl_method = "DELETE"\n\npayload = {\n}  \n\nbase_url = "https://" + ip + ":9440/api/nutanix/v3/tunnels/@@{tunnel_uuid}@@"\nurl = base_url\nr = urlreq(url, url_method, auth="BASIC", user=user, passwd=password, params=json.dumps(payload), verify=False, headers=headers)\nprint "Status code: {}".format(r.status_code)\nprint "Output: {}".format(r.text)\nif r.ok:\n  print "Successful deletion of tunnel VM"\nelse:\n  exit(1)\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Associate the ",(0,r.kt)("strong",{parentName:"li"},"Delete Tunnel VM")," action with the ",(0,r.kt)("strong",{parentName:"li"},"Package\nuninstall")," action. Click on ",(0,r.kt)("strong",{parentName:"li"},"+ Action"),". Choose the ",(0,r.kt)("strong",{parentName:"li"},"Delete\nTunnel VM")," action.")),(0,r.kt)("blockquote",null,(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},'Enter the name of Application \\"TunnelVM-\\<INITIALS',">"," and fill out\nthe form with the requested information")),(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{src:n(70038).Z,width:"903",height:"436"})))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Press ",(0,r.kt)("strong",{parentName:"li"},"Deploy")),(0,r.kt)("li",{parentName:"ol"},'Once the application is \\"running\\". Let\\\'s look at the audit log.')),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(36560).Z,width:"719",height:"582"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In Calm ",(0,r.kt)("strong",{parentName:"li"},"Accounts"),", let\\'s look at the tunnel VM during\nprovisioning")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(19080).Z,width:"903",height:"311"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In Prism Central, ",(0,r.kt)("strong",{parentName:"li"},"Compute & Storage"),". Click on ",(0,r.kt)("strong",{parentName:"li"},"VMs"))),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(2480).Z,width:"903",height:"569"})))}m.isMDXComponent=!0},46800:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/AddTaskToAction-3799cb33ab8e9a58f8f05f6d42d261a9.png"},95716:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Create-Service-Action-9f5f90c943e43a62344c45d4c16b5b6e.png"},79525:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Delete-VPC-fab263165be09af190654f1d7e47058d.png"},80157:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/LaunchVPC-4cd60808217f32d3bbccfe4af18e5c40.png"},88035:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Subnet-Launch-304ca766409e0597b176032afdfcac2c.png"},40019:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/audit-log-subnet-c749d7391d2643922d5db0ada0db47e1.png"},93300:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/create-blueprint-b3ac2b8be639e2fd04d7a9b22441a163.png"},56153:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/package-install-8c397a6148ef175dc4e690a60aac2508.png"},32053:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/pc_cred-1fd5d1804d4cc22b0215a0a89ee39cbf.png"},53660:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/subnet-variables-3409bfcfb3243961c9a2d10feb23be55.png"},78209:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/subnet-e88cfebbf6200b9072160719228b8853.png"},61230:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/successful-vpc-d345b554dbd7ab3f5e36939a684f13c3.png"},36560:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tunnel-vm-audit-12f4742289ad875ffe9598c8aed6c0da.png"},19080:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tunnel-vm-created-0809111c1b2b6be7243e8be7213ae98c.png"},70038:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tunnel-vm-launch-37a5e64eb66edd967281e7cc13648312.png"},14189:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tunnel-vm-variables-9c6c7088323e67d0ddbff528861ceab5.png"},2480:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tunnel-vm-c12622d7f795707bbaa3c9157abc5dbe.png"},41657:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/variables-cc67dc17faacfbef33aaea5cbc0275d1.png"},5423:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/vpc-audit-log-807cb5513e3a69d02e03778176e3c4a5.png"},11895:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/vpc-detail-b65496cdac60ea816345e54620e0f0f3.png"},91416:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/vpc-overview-cf5d3284e273097b1d8828257ceccb95.png"},60497:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/vpc-subnet-343c26c53beb287738f1c6ee4a4d24c7.png"}}]);